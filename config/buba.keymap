#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define EN_DEFAULT 0
#define RU_DEFAULT 1
#define EN_SYMB 2
#define RU_SYMB 3
#define FUNC 4
#define F_KEYS 5
#define EN_PRACTICE 6
#define RU_PRACTICE 7

// TODO:
// - Wake from soft-off via kscan https://zmk.dev/docs/features/soft-off#kscan-sideband-behavior

/ {
    macros {
        en_to_ru_switch_kb_and_os: en_to_ru_switch_kb_and_os {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&to RU_DEFAULT>
            , <&kp CAPSLOCK>
            ;
        };

        ru_to_en_switch_kb_and_os: ru_to_en_switch_kb_and_os {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&to EN_DEFAULT>
            , <&kp CAPSLOCK>
            ;
        };

        double_f: double_f {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&kp F>
            , <&kp F>
            ;
        };
    };

    
    behaviors {
        // ----- LANGUAGE SWITCH -----
        // tap - toggle layout on keyboard and OS
        // double tap - switch keyboard to EN layout
        // triple tap - switch keyboard to RU layout
        en_to_ru: en_to_ru {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings 
                = <&en_to_ru_switch_kb_and_os>
                , <&none>
                , <&to RU_DEFAULT>
                ;
        };

        ru_to_en: ru_to_en {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings
                = <&ru_to_en_switch_kb_and_os>
                , <&to EN_DEFAULT>
                , <&none>
                ;
        };

        // ----- HOME ROW MODIFIERS -----
        hrm: home_row_modifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
        
        hold_caps_word: hold_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&caps_word>, <&double_f>;
        };

        f_shft_caps: F_hold_SHIFT_doubletap_CAPS_WORD {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hrm LSHFT F>, <&hold_caps_word 0 0>;
        };
        
        // ----- SPECIAL KEYS -----
        q_esc: q_esc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp ESC>;
        };
        a_tab: a_tab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp A>, <&kp TAB>;
        };

        // ----- RUSSIAN KEYS THAT DIDN'T FIT -----
        ze_ha: ze_ha {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp LEFT_BRACKET>;
        };
        soft_hard_sign: hard_sign {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;
        };
        ht_let: hold_tap_letter {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };

        // ----- SYMBOLS COMMON -----
        minus_underscore: minus_underscore {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
        };
        equal_plus: equal_plus {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };
        n1_shifted: n1_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp EXCLAMATION>;
        };
        n9_shifted: n9_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N9>, <&kp LEFT_PARENTHESIS>;
        };
        n0_shifted: n0_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N0>, <&kp RIGHT_PARENTHESIS>;
        };
        
        // ----- SYMBOLS ENGLISH -----
        en_ques_excl: en_question_exclamation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp QUESTION>, <&kp EXCL>;
        };
        en_quotes: en_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };
        en_colons: en_colons {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
        };
        en_left_brac: en_left_bracet_left_brace {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;
        };
        en_right_brac: en_right_bracet_right_brace {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;
        };
        en_slash_ques: en_slash_ques {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SLASH>, <&kp QUESTION>;
        };
        en_backslash_pipe: en_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
        };
        en_lt_gt: en_lt_gt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };
        en_grave_tilde: en_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };
        en_2_shifted: en_2_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N2>, <&kp AT>;
        };
        en_3_shifted: en_3_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N3>, <&kp HASH>;
        };
        en_4_shifted: en_4_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N4>, <&kp DOLLAR>;
        };
        en_5_shifted: en_5_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N5>, <&kp PERCENT>;
        };
        en_6_shifted: en_6_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N6>, <&kp CARET>;
        };
        en_7_shifted: en_7_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N7>, <&kp AMPERSAND>;
        };
        en_8_shifted: en_8_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N8>, <&kp ASTERISK>;
        };

        // ----- SYMBOLS RUSSIAN -----
        ru_ques_excl: ru_question_exclamation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(SLASH)>, <&kp LS(N1)>;
        };
        ru_quotes: ru_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(N2)>, <&kp LS(N2)>;  // TODO: implement single quote
        };
        ru_colons: ru_colons {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(N5)>, <&kp LS(N8)>;
        };
        ru_left_brac: ru_left_bracet_left_brace {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(GRAVE)>, <&kp LEFT_BRACE>;  // TODO: implement left brace
        };
        ru_right_brac: ru_right_bracet_right_brace {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp RIGHT_BRACE>;  // TODO: implement right brace
        };
        ru_slash_ques: ru_slash_ques {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SLASH>, <&kp LS(SLASH)>;
        };
        ru_backslash_pipe: ru_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BACKSLASH>, <&kp PIPE>;  // TODO: implement?
        };
        ru_lt_gt: ru_lt_gt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(NUBS)>, <&kp NUBS>;
        };
        ru_grave_tilde: ru_grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;  // TODO: implement?
        };
        ru_2_shifted: ru_2_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N2>, <&kp AT>;  // TODO: implement AT
        };
        ru_3_shifted: ru_3_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N3>, <&kp HASH>;  // TODO: implement hash
        };
        ru_4_shifted: ru_4_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N4>, <&kp DOLLAR>;  // TODO: implement dollar
        };
        ru_5_shifted: ru_5_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N5>, <&kp LS(N4)>;
        };
        ru_6_shifted: ru_6_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N6>, <&kp CARET>;  // TODO: implement CARET
        };
        ru_7_shifted: ru_7_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N7>, <&kp AMPERSAND>;  // TODO: implement AMPERSAND
        };
        ru_8_shifted: ru_8_shifted {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N8>, <&kp ASTERISK>;  // TODO: implement ASTERISK
        };
    };

    
    keymap {
        compatible = "zmk,keymap";
        
        en_default {
            // +------------------------------------------------------------------+
            // |Q→ESC|  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |
            // |A→TAB|  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  /  |
            //
            //       | LANG | SPC→symb | CMD |     | ENT→func | SPC→symb | BSPC |
            // +------------------------------------------------------------------+
            bindings = <
                &q_esc        &kp W        &kp E        &kp R         &kp T               &kp Y  &kp U         &kp I        &kp O        &kp P   
                &a_tab        &hrm LALT S  &hrm LGUI D  &f_shft_caps  &kp G               &kp H  &hrm LSHFT J  &hrm LGUI K  &hrm LALT L  &hrm LCTRL SEMI
                &hrm LCTRL Z  &kp X        &kp C        &kp V         &kp B               &kp N  &kp M         &kp COMMA    &kp DOT      &kp FSLH
                
                &en_to_ru   &lt EN_SYMB SPACE   &kp LGUI           &lt FUNC ENTER   &lt EN_SYMB SPACE   &kp BSPC
            >;
        };

        ru_default {
            // +-----------------------------------------------------------------+
            // |Й→ESC|  Ц  |  У  |  К  | Е⇉Ё |     |  Н  |  Г  |  Ш  |  Щ  | З→Х |
            // |Ф→TAB|  Ы  |  В  |  А  |  П  |     |  Р  |  О  |  Л  |  Д  |  Ж  |
            // |  Я  |  Ч  |  С  |  М  |  И  |     |  Т  | Ь→Ъ |  Б  |  Ю  |  Э  |
            //
            //       | LANG | SPC→symb | CMD |     | ENT→func | SPC→symb | BSPC |
            // +-----------------------------------------------------------------+
            bindings = <
                &q_esc        &kp W        &kp E        &kp R         &ht_let BSLH T       &kp Y  &kp U            &kp I        &kp O        &ze_ha
                &a_tab        &hrm LALT S  &hrm LGUI D  &f_shft_caps  &kp G                &kp H  &hrm LSHFT J     &hrm LGUI K  &hrm LALT L  &hrm LCTRL SEMI
                &hrm LCTRL Z  &kp X        &kp C        &kp V         &kp B                &kp N  &soft_hard_sign  &kp COMMA    &kp DOT      &kp SINGLE_QUOTE
                
                &ru_to_en   &lt RU_SYMB SPACE   &kp LGUI            &lt FUNC ENTER   &lt RU_SYMB SPACE   &kp BSPC
            >;
        };

        en_symb {
            // +-----------------------------------------------------------------+
            // |     | 7→& | 8→* | 9→( | 0→) |     |     |     |     |     |     |
            // | <→> | 4→$ | 5→% | 6→^ | -→_ |     | ?→! |  ,  | :→; | [→{ | ]→} |
            // | `→~ | 1→! | 2→@ | 3→# | =→+ |     |  @  |  .  | '→" | /→? | \→| |
            //
            //     | LANG | SPC | ↓↓↓ |     | ENT | SPC | BSPC |
            // +-----------------------------------------------------------------+
            bindings = <
                &none             &en_7_shifted   &en_8_shifted   &n9_shifted     &n0_shifted             &none           &none       &none        &none            &none   
                &en_lt_gt         &en_4_shifted   &en_5_shifted   &en_6_shifted   &minus_underscore       &en_ques_excl   &kp COMMA   &en_colons   &en_left_brac    &en_right_brac
                &en_grave_tilde   &n1_shifted     &en_2_shifted   &en_3_shifted   &equal_plus             &kp AT          &kp DOT     &en_quotes   &en_slash_ques   &en_backslash_pipe
                
                &trans   &kp SPACE   &trans       &kp ENTER   &kp SPACE   &kp BSPC
            >;
        };

        ru_symb {
            // SAME LAYOUT AS en_symb, BUT ADOPTED FOR RU OS LAYOUT
            // TODO: implement at
            bindings = <
                &none             &ru_7_shifted   &ru_8_shifted   &n9_shifted     &n0_shifted             &none           &none        &none        &none            &none
                &ru_lt_gt         &ru_4_shifted   &ru_5_shifted   &ru_6_shifted   &minus_underscore       &ru_ques_excl   &kp LS(N6)   &ru_colons   &ru_left_brac    &ru_right_brac
                &ru_grave_tilde   &n1_shifted     &ru_2_shifted   &ru_3_shifted   &equal_plus             &kp AT          &kp LS(N7)   &ru_quotes   &ru_slash_ques   &ru_backslash_pipe
                
                &trans   &kp SPACE   &trans       &kp ENTER   &kp SPACE   &kp BSPC
            >;
        };

        func {
            // +-----------------------------------------------------------------------+
            // |     |     |    | MUTE |     |       |     |     |     |     |   LOCK   |
            // |     |     | PP | VOL↑ | BR↑ |       |  ←  |  ↓  |  ↑  |  →  |SCREENSHOT|
            // |     |     |    | VOL↓ | BR↓ |       |  ⇇  |  ↵  |  ↳  |  ⇉  | SOFT OFF |
            //
            //            |     |     |F_KEYS|       |     |     |     |
            // +-----------------------------------------------------------------------+
            bindings = <
                &none   &none   &none             &kp C_MUTE     &none               &none          &none      &none    &none           &kp LG(LC(Q))   
                &none   &none   &kp C_PLAY_PAUSE  &kp C_VOL_UP   &kp C_BRI_UP        &kp LEFT       &kp DOWN   &kp UP   &kp RIGHT       &kp LG(LS(N4))
                &none   &none   &none             &kp C_VOL_DN   &kp C_BRI_DN        &kp LA(LEFT)   &kp HOME   &kp END  &kp LA(RIGHT)   &soft_off
                
                                                   &none   &none   &mo F_KEYS        &none   &none   &none
            >;
        };

        f_keys {
            bindings = <
                &none &none &none &none &none        &to RU_PRACTICE  &kp F9   &kp F10  &kp F11  &kp F12
                &none &none &none &none &none        &to EN_PRACTICE  &kp F5   &kp F6   &kp F7   &kp F8
                &none &none &none &none &none        &none            &kp F1   &kp F2   &kp F3   &kp F4
                
                            &none &none &none        &none &none &none
            >;
        };

        en_practice {
            // Same as en_default but without home row mods
            bindings = <
                &q_esc        &kp W        &kp E        &kp R         &kp T               &kp Y  &kp U         &kp I        &kp O        &kp P   
                &a_tab        &kp S        &kp D        &kp F         &kp G               &kp H  &kp J         &kp K        &kp L        &hrm LCTRL SEMI
                &hrm LCTRL Z  &kp X        &kp C        &kp V         &kp B               &kp N  &kp M         &kp COMMA    &kp DOT      &kp FSLH
                
                &en_to_ru   &lt EN_SYMB SPACE   &kp LGUI           &lt FUNC ENTER   &lt EN_SYMB SPACE   &kp BSPC
            >;
        };

        ru_practice {
            // Same as ru_default but without home row mods
            bindings = <
                &q_esc        &kp W        &kp E        &kp R         &ht_let BSLH T       &kp Y  &kp U            &kp I        &kp O        &ze_ha
                &a_tab        &kp S        &kp D        &kp F         &kp G                &kp H  &kp J            &kp K        &kp L        &hrm LCTRL SEMI
                &hrm LCTRL Z  &kp X        &kp C        &kp V         &kp B                &kp N  &soft_hard_sign  &kp COMMA    &kp DOT      &kp SINGLE_QUOTE
                
                &ru_to_en   &lt RU_SYMB SPACE   &kp LGUI            &lt FUNC ENTER   &lt RU_SYMB SPACE   &kp BSPC
            >;
        };
    };
};
